# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

interface AuditTable {
    createdAt: DateTime!
    updatedAt: DateTime
}

interface BaseTask {
    createdAt: DateTime!
    description: String
    dueDate: DateTime
    id: ID!
    priority: Int
    title: String!
    updatedAt: DateTime
}

interface Node {
    id: ID!
}

interface TaskActivity {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime
}

type Address implements AuditTable & Node {
    addressLine1: String
    addressLine2: String
    addressLine3: String
    city: String
    country: String
    createdAt: DateTime!
    id: ID!
    postalCode: String
    state: String
    type: String
    updatedAt: DateTime
}

"Address Connection"
type AddressConnection {
    "Field edges"
    edges: [AddressEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Address Edge"
type AddressEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Address
}

type Customer implements AuditTable & Node {
    addresses(after: String, before: String, first: Int, last: Int): AddressConnection
    createdAt: DateTime!
    dateOfBirth: DateTime
    documents(after: String, before: String, first: Int, last: Int): DocumentConnection
    email: String
    firstName: String
    gender: String
    id: ID!
    jobTitle: String
    lastName: String
    middleName: String
    mobileNumber1: MobileNumber
    mobileNumber2: MobileNumber
    organizations: CustomerOrganizationConnection
    priority: Int
    profilePicture: ProfilePicture
    qualification: String
    updatedAt: DateTime
    user: User
}

"Customer Connection"
type CustomerConnection {
    "Field edges"
    edges: [CustomerEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Customer Edge"
type CustomerEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Customer
}

type CustomerMeta implements AuditTable & Node {
    createdAt: DateTime!
    id: ID!
    key: String!
    updatedAt: DateTime
    value: JSON
}

"CustomerMeta Connection"
type CustomerMetaConnection {
    "Field edges"
    edges: [CustomerMetaEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"CustomerMeta Edge"
type CustomerMetaEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: CustomerMeta
}

type CustomerOrganization implements AuditTable & Node {
    createdAt: DateTime!
    id: ID!
    organization: CustomerOrganizationInfo
    role: String
    updatedAt: DateTime
}

"CustomerOrganization Connection"
type CustomerOrganizationConnection {
    "Field edges"
    edges: [CustomerOrganizationEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"CustomerOrganization Edge"
type CustomerOrganizationEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: CustomerOrganization
}

type CustomerOrganizationInfo implements AuditTable & Node {
    address(after: String, before: String, first: Int, last: Int): AddressConnection
    createdAt: DateTime!
    id: ID!
    logo: String
    name: String
    updatedAt: DateTime
}

"CustomerOrganizationInfo Connection"
type CustomerOrganizationInfoConnection {
    "Field edges"
    edges: [CustomerOrganizationInfoEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"CustomerOrganizationInfo Edge"
type CustomerOrganizationInfoEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: CustomerOrganizationInfo
}

type Document implements AuditTable & Node {
    createdAt: DateTime!
    expiry: DateTime
    id: ID!
    title: String!
    updatedAt: DateTime
    url: String
}

"Document Connection"
type DocumentConnection {
    "Field edges"
    edges: [DocumentEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Document Edge"
type DocumentEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Document
}

type MobileNumber {
    countryCode: Int
    mobileNumber: String
}

type Organization implements AuditTable & Node {
    createdAt: DateTime!
    defaultProject: Project
    id: ID!
    name: String!
    projects(after: String, before: String, first: Int, last: Int): ProjectConnection
    teams(after: String, before: String, first: Int, last: Int): TeamConnection
    updatedAt: DateTime
}

"Organization Connection"
type OrganizationConnection {
    "Field edges"
    edges: [OrganizationEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Organization Edge"
type OrganizationEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Organization
}

"PageInfo"
type PageInfo {
    "Field endCursor"
    endCursor: String
    "Field hasNextPage"
    hasNextPage: Boolean!
    "Field hasPreviousPage"
    hasPreviousPage: Boolean!
    "Field startCursor"
    startCursor: String
}

type ProfilePicture implements AuditTable & Node {
    createdAt: DateTime!
    id: ID!
    picture: String
    updatedAt: DateTime
}

type Project implements AuditTable & Node {
    createdAt: DateTime!
    description: String
    id: ID!
    name: String!
    spaces(after: String, before: String, first: Int, last: Int): SpaceConnection
    template: TemplateConnection
    updatedAt: DateTime
}

"Project Connection"
type ProjectConnection {
    "Field edges"
    edges: [ProjectEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Project Edge"
type ProjectEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Project
}

type Query {
    _service: _Service
    me: User
    node(id: ID!): Node
    projects(after: String, before: String, first: Int, last: Int): ProjectConnection
}

type Space implements AuditTable & Node {
    createdAt: DateTime!
    id: ID!
    name: String!
    spaces(after: String, before: String, first: Int, last: Int): SpaceConnection
    tasks(after: String, before: String, first: Int, last: Int): TaskConnection
    tasksByStatuses(after: String, before: String, first: Int, last: Int): TaskByStatusConnection
    templates(after: String, before: String, first: Int, last: Int): TemplateConnection
    updatedAt: DateTime
}

"Space Connection"
type SpaceConnection {
    "Field edges"
    edges: [SpaceEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Space Edge"
type SpaceEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Space
}

type Status implements AuditTable & Node {
    color: String
    createdAt: DateTime!
    id: ID!
    name: String!
    updatedAt: DateTime
}

"Status Connection"
type StatusConnection {
    "Field edges"
    edges: [StatusEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Status Edge"
type StatusEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Status
}

type Task implements AuditTable & BaseTask & Node {
    assigned: UserConnection
    background: String
    createdAt: DateTime!
    description: String
    dueDate: DateTime
    followers: UserConnection
    icon: String
    id: ID!
    priority: Int
    reportedBy: User
    status: Status
    tag: TaskTagConnection
    taskStages: TaskStageConnection
    title: String!
    updatedAt: DateTime
}

"TaskActivity Connection"
type TaskActivityConnection {
    "Field edges"
    edges: [TaskActivityEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TaskActivity Edge"
type TaskActivityEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TaskActivity
}

type TaskByStatus implements Node {
    id: ID!
    status: Status
    tasks(after: String, before: String, first: Int, last: Int): TaskConnection
}

"TaskByStatus Connection"
type TaskByStatusConnection {
    "Field edges"
    edges: [TaskByStatusEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TaskByStatus Edge"
type TaskByStatusEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TaskByStatus
}

type TaskComment implements AuditTable & Node & TaskActivity {
    content: String!
    createdAt: DateTime!
    id: ID!
    replyTo: TaskComment
    updatedAt: DateTime
}

"TaskComment Connection"
type TaskCommentConnection {
    "Field edges"
    edges: [TaskCommentEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TaskComment Edge"
type TaskCommentEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TaskComment
}

"Task Connection"
type TaskConnection {
    "Field edges"
    edges: [TaskEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Task Edge"
type TaskEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Task
}

type TaskStage implements AuditTable & Node {
    activity(after: String, before: String, first: Int, last: Int): TaskActivityConnection
    comments(after: String, before: String, first: Int, last: Int): TaskCommentConnection
    completed: Boolean
    createdAt: DateTime!
    documents: DocumentConnection
    icon: String
    id: ID!
    title: String!
    updatedAt: DateTime
}

"TaskStage Connection"
type TaskStageConnection {
    "Field edges"
    edges: [TaskStageEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TaskStage Edge"
type TaskStageEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TaskStage
}

type TaskTag implements AuditTable & Node {
    color: String
    createdAt: DateTime!
    id: ID!
    title: String
    updatedAt: DateTime
}

"TaskTag Connection"
type TaskTagConnection {
    "Field edges"
    edges: [TaskTagEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TaskTag Edge"
type TaskTagEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TaskTag
}

type Team implements AuditTable & Node {
    createdAt: DateTime!
    description: String
    id: ID!
    members(after: String, before: String, first: Int, last: Int): TeamMemberConnection
    name: String!
    teams(after: String, before: String, first: Int, last: Int): TeamConnection
    updatedAt: DateTime
}

"Team Connection"
type TeamConnection {
    "Field edges"
    edges: [TeamEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Team Edge"
type TeamEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Team
}

type TeamMember implements AuditTable & Node {
    createdAt: DateTime!
    id: ID!
    role: String
    updatedAt: DateTime
    user: User!
}

"TeamMember Connection"
type TeamMemberConnection {
    "Field edges"
    edges: [TeamMemberEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"TeamMember Edge"
type TeamMemberEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: TeamMember
}

type Template implements AuditTable & BaseTask & Node {
    background: String
    createdAt: DateTime!
    description: String
    dueDate: DateTime
    icon: String
    id: ID!
    priority: Int
    title: String!
    updatedAt: DateTime
}

"Template Connection"
type TemplateConnection {
    "Field edges"
    edges: [TemplateEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"Template Edge"
type TemplateEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: Template
}

type User implements AuditTable & Node {
    createdAt: DateTime!
    dateOfBirth: DateTime
    defaultOrganization: Organization
    displayName: String
    email: String
    employeeId: String
    firstName: String
    gender: String
    id: ID!
    lastName: String
    middleName: String
    organizations: OrganizationConnection
    phoneNumber: MobileNumber
    phoneNumber2: MobileNumber
    qualification: String
    updatedAt: DateTime
}

"User Connection"
type UserConnection {
    "Field edges"
    edges: [UserEdge]
    "Field pageInfo"
    pageInfo: PageInfo
}

"User Edge"
type UserEdge {
    "Field cursor"
    cursor: String
    "Field node"
    node: User
}

type _Service {
    sdl: String!
}

enum ErrorDetail {
    """

    The deadline expired before the operation could complete.

    For operations that change the state of the system, this error
    may be returned even if the operation has completed successfully.
    For example, a successful response from a server could have been
    delayed long enough for the deadline to expire.

    HTTP Mapping: 504 Gateway Timeout
    Error Type: UNAVAILABLE
    """
    DEADLINE_EXCEEDED
    """

    The server detected that the client is exhibiting a behavior that
    might be generating excessive load.

    HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
    Error Type: UNAVAILABLE
    """
    ENHANCE_YOUR_CALM
    """

    The requested field is not found in the schema.

    This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
    query is valid, but is unable to return a result (if, for example, a
    specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
    returned by the server to signify that the requested field is not known to exist.
    This may be returned in lieu of failing the entire query.
    See also `PERMISSION_DENIED` for cases where the
    requested field is invalid only for the given user or class of users.

    HTTP Mapping: 404 Not Found
    Error Type: BAD_REQUEST
    """
    FIELD_NOT_FOUND
    """

    The client specified an invalid argument.

    Note that this differs from `FAILED_PRECONDITION`.
    `INVALID_ARGUMENT` indicates arguments that are problematic
    regardless of the state of the system (e.g., a malformed file name).

    HTTP Mapping: 400 Bad Request
    Error Type: BAD_REQUEST
    """
    INVALID_ARGUMENT
    """

    The provided cursor is not valid.

    The most common usage for this error is when a client is paginating
    through a list that uses stateful cursors. In that case, the provided
    cursor may be expired.

    HTTP Mapping: 404 Not Found
    Error Type: NOT_FOUND
    """
    INVALID_CURSOR
    """

    Unable to perform operation because a required resource is missing.

    Example: Client is attempting to refresh a list, but the specified
    list is expired. This requires an action by the client to get a new list.

    If the user is simply trying GET a resource that is not found,
    use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
    is to be used particularly when the user is performing an operation
    that requires a particular resource to exist.

    HTTP Mapping: 400 Bad Request or 500 Internal Server Error
    Error Type: FAILED_PRECONDITION
    """
    MISSING_RESOURCE
    """

    Service Error.

    There is a problem with an upstream service.

    This may be returned if a gateway receives an unknown error from a service
    or if a service is unreachable.
    If a request times out which waiting on a response from a service,
    `DEADLINE_EXCEEDED` may be returned instead.
    If a service returns a more specific error Type, the specific error Type may
    be returned instead.

    HTTP Mapping: 502 Bad Gateway
    Error Type: UNAVAILABLE
    """
    SERVICE_ERROR
    """

    Request failed due to network errors.

    HTTP Mapping: 503 Unavailable
    Error Type: UNAVAILABLE
    """
    TCP_FAILURE
    """

    Request throttled based on server concurrency limits.

    HTTP Mapping: 503 Unavailable
    Error Type: UNAVAILABLE
    """
    THROTTLED_CONCURRENCY
    """

    Request throttled based on server CPU limits

    HTTP Mapping: 503 Unavailable.
    Error Type: UNAVAILABLE
    """
    THROTTLED_CPU
    """

    The operation is not implemented or is not currently supported/enabled.

    HTTP Mapping: 501 Not Implemented
    Error Type: BAD_REQUEST
    """
    UNIMPLEMENTED
    """

    Unknown error.

    This error should only be returned when no other error detail applies.
    If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

    HTTP Mapping: 500 Internal Server Error
    """
    UNKNOWN
}

enum ErrorType {
    """

    Bad Request.

    There is a problem with the request.
    Retrying the same request is not likely to succeed.
    An example would be a query or argument that cannot be deserialized.

    HTTP Mapping: 400 Bad Request
    """
    BAD_REQUEST
    """

    The operation was rejected because the system is not in a state
    required for the operation's execution.  For example, the directory
    to be deleted is non-empty, an rmdir operation is applied to
    a non-directory, etc.

    Service implementers can use the following guidelines to decide
    between `FAILED_PRECONDITION` and `UNAVAILABLE`:

    - Use `UNAVAILABLE` if the client can retry just the failing call.
    - Use `FAILED_PRECONDITION` if the client should not retry until
    the system state has been explicitly fixed.  E.g., if an "rmdir"
    fails because the directory is non-empty, `FAILED_PRECONDITION`
    should be returned since the client should not retry unless
    the files are deleted from the directory.

    HTTP Mapping: 400 Bad Request or 500 Internal Server Error
    """
    FAILED_PRECONDITION
    """

    Internal error.

    An unexpected internal error was encountered. This means that some
    invariants expected by the underlying system have been broken.
    This error code is reserved for serious errors.

    HTTP Mapping: 500 Internal Server Error
    """
    INTERNAL
    """

    The requested entity was not found.

    This could apply to a resource that has never existed (e.g. bad resource id),
    or a resource that no longer exists (e.g. cache expired.)

    Note to server developers: if a request is denied for an entire class
    of users, such as gradual feature rollout or undocumented allowlist,
    `NOT_FOUND` may be used. If a request is denied for some users within
    a class of users, such as user-based access control, `PERMISSION_DENIED`
    must be used.

    HTTP Mapping: 404 Not Found
    """
    NOT_FOUND
    """

    The caller does not have permission to execute the specified
    operation.

    `PERMISSION_DENIED` must not be used for rejections
    caused by exhausting some resource or quota.
    `PERMISSION_DENIED` must not be used if the caller
    cannot be identified (use `UNAUTHENTICATED`
    instead for those errors).

    This error Type does not imply the
    request is valid or the requested entity exists or satisfies
    other pre-conditions.

    HTTP Mapping: 403 Forbidden
    """
    PERMISSION_DENIED
    """

    The request does not have valid authentication credentials.

    This is intended to be returned only for routes that require
    authentication.

    HTTP Mapping: 401 Unauthorized
    """
    UNAUTHENTICATED
    """

    Currently Unavailable.

    The service is currently unavailable.  This is most likely a
    transient condition, which can be corrected by retrying with
    a backoff.

    HTTP Mapping: 503 Unavailable
    """
    UNAVAILABLE
    """

    Unknown error.

    For example, this error may be returned when
    an error code received from another address space belongs to
    an error space that is not known in this address space.  Also
    errors raised by APIs that do not return enough error information
    may be converted to this error.

    If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
    Unknown errors MUST NOT trigger any special behavior. These MAY be treated
    by an implementation as being equivalent to INTERNAL.

    When possible, a more specific error should be provided.

    HTTP Mapping: 520 Unknown Error
    """
    UNKNOWN
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A JSON scalar"
scalar JSON

scalar _FieldSet
